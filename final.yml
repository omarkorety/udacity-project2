Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  EnvironmentName:
    Description: An Environment name that will be prefixed to resources
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this
    Type: String
    Default: 10.0.0.0/16
  
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24
Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  # ProfileWithRolesForOurApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties: 
  #     Roles:
  #       - UdacityS3ReadOnlyEC2

  #################---Network---###############
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags: 
        - Key: Name 
          Value: !Ref EnvironmentName
#########################################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
          - Key: Name
            Value: !Ref EnvironmentName
###################################     INTERNET GATEWAY   
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: 
        Ref: InternetGateway
      VpcId: 
        Ref: VPC
#############################################################
  PublicSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
################################################################################
  PublicSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
###############################################################

  PrivateSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
##############################################################################
  PrivateSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

##############################################
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      Domain: vpc
##################################################
  NatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

################################################################
  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      Domain: vpc
##################################################
  NatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
#######################################################
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Public Routes
#################################################################
  DefaultPublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
###############################################################
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
####################################################################
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
########################################
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Private Routes (AZ1)
#############################################
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
########################################################
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
##########################################################
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Private Routes (AZ2)
#############################################
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
########################################################
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
#######################----SERVERS-----#################################
#######--Security Groups FOR Basion--################
  SecurityGroupsBasion:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security Groups For Basion"
      # GroupName: "basion"
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        Description: Allow ssh outbound  
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

      SecurityGroupIngress: 
      - IpProtocol: tcp
        Description: Allow ssh inbound
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
# #######################--Security Groups For servers--#################
  SecurityGroupsServers:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security Groups For Basion"
      # GroupName: "servers"
      VpcId:
        Ref: VPC
      SecurityGroupIngress: 
      - IpProtocol: tcp
        Description: Allow ssh inbound
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: Allow htttp requests inbound
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
##########--Security Groups For Load Balancer--###################
  SecurityGroupsLB:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Security Groups For Basion"
      # GroupName: "LoadBalnce"
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        Description: Allow http requests outbound  
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
      - IpProtocol: tcp
        Description: Allow http requests inbound
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
################################---Auto Scaling Group---######################
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
         #!/bin/bash
         sudo apt-get update -y
         sudo apt-get install apache2 -y
         sudo systemctl start apache2.service
         cd /var/www/html
         echo "$(hostname -f) Web Server Up and Running!" > index.html     
      # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
      ImageId: ami-0574da719dca65348
      # ToDo: Change the key-pair name, as applicable to you. 
      KeyName: project2
      SecurityGroups:
      - Ref: SecurityGroupsServers
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
##########################################
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Ref: VPC
#################---Load-Balancer---###############
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      SecurityGroups:
      - Ref: SecurityGroupsLB
#################################################
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
##################################################
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
Outputs:
  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !Join [ "://", [ http,!GetAtt WebAppLB.DNSName ] ]
# !GetAtt WebAppLB.DNSName
  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
        #  #!/bin/bash
        #  apt-get update -y
        #  apt-get install apache2 -y
        #  systemctl start apache2.service
        #  cd /var/www/html
        #  echo "Udacity Demo Web Server Up and Running!" > index.html